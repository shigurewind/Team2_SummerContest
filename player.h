//=============================================================================
//
// モデル処理 [player.h]
// Author : 
//
//=============================================================================
#pragma once
#include "model.h"
#include "bullet.h"
#include "object.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define MAX_PLAYER		(1)					// プレイヤーの数

#define	PLAYER_SIZE		(5.0f)				// 当たり判定の大きさ



//*****************************************************************************
// 構造体定義
//*****************************************************************************
//struct PLAYER
//{
//	XMFLOAT4X4			mtxWorld;			// ワールドマトリックス
//	XMFLOAT3			pos;				// モデルの位置
//	XMFLOAT3			rot;				// モデルの向き(回転)
//	XMFLOAT3			scl;				// モデルの大きさ(スケール)
//
//	float				spd;				// 移動スピード
//	
//	BOOL				load;
//	DX11_MODEL			model;				// モデル情報
//
//	int					shadowIdx;			// 影のインデックス番号
//
//	BOOL				alive;
//
//	float				size;
//
//	// 階層アニメーション用のメンバー変数
//	float				time;				// 線形補間用
//	int					tblNo;				// 行動データのテーブル番号
//	int					tblMax;				// そのテーブルのデータ数
//
//	// 親は、NULL、子供は親のアドレスを入れる
//	PLAYER				*parent;			// 自分が親ならNULL、自分が子供なら親のplayerアドレス
//
//	// クォータニオン
//	XMFLOAT4			Quaternion;
//
//	XMFLOAT3			UpVector;			// 自分が立っている所
//
//
//	BOOL			isGround;	//地面チェック
//	float			verticalSpeed;	//落とすSpeed
//	float			maxFallSpeed;//最大落とすSpeed
//	float			jumpPower;	//jumpのパワー
//
//
//	// 弾数管理（種類ごと）
//	int ammoNormal;
//	int maxAmmoNormal;
//
//	int ammoFire;
//	int maxAmmoFire;
//	float				HP;
//	float				HP_MAX;
//};



class PLAYER : public Object
{
public:
	void Init();
	void Update();
	void Draw();

	void HandleInput();
	void HandleShooting();
	void HandleReload();
	void HandleJump();
	void HandleGroundCheck();

	void EventCheck();



	XMFLOAT4X4			mtxWorld;			// ワールドマトリックス
	XMFLOAT3			newPos;				// モデルの次のフレーム予測位置
	XMFLOAT3			rot;				// モデルの向き(回転)
	XMFLOAT3			scl;				// モデルの大きさ(スケール)

	BOOL				load;
	DX11_MODEL			model;				// モデル情報

	// クォータニオン
	XMFLOAT4			Quaternion;

	XMFLOAT3			UpVector;			// 自分が立っている所


	float HP, HP_MAX;
	int ammoNormal, maxAmmoNormal;
	int ammoFire, maxAmmoFire;

	//移動関連
	float			size;				// 当たり判定の大きさ
	float			speed;				// 移動スピード
	float			jumpPower;	//jumpのパワー

	//攻撃
	float meleeCDTime; // 近接攻撃のクールダウン時間


	int shadowIdx;
	bool alive;

	//武器関連
	WeaponType currentWeapon;
	BulletType currentBullet;
};


//extern PLAYER g_Player;


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
HRESULT InitPlayer(void);
void UninitPlayer(void);
void UpdatePlayer(void);
void DrawPlayer(void);

WeaponType GetCurrentWeaponType(void);
BulletType GetCurrentBulletType(void);


PLAYER* GetPlayer(void);
bool CheckPlayerGroundSimple(XMFLOAT3 pos, float offsetY, float& groundY);
